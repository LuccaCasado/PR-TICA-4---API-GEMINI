package br.edu.fatecpg.api.gemini.view;
 
import br.edu.fatecpg.api.gemini.service.ConsomeAPI;
 
import java.io.IOException;
import java.util.Scanner;
 
public class Main {
    public static void main(String[] args) throws IOException, InterruptedException {
        Scanner scan = new Scanner(System.in);
        boolean running = true;
 
        while (running) {
            System.out.println("Entre com sua opção: ");
            System.out.println("1 - Fazer Pergunta");
            System.out.println("2 - Sair");
 
            int op = scan.nextInt();
            scan.nextLine(); // Limpa o buffer
 
            switch (op) {
                case 1:
                    System.out.println("Digite sua pergunta: ");
                    String pergunta = scan.nextLine();
                    String resposta = ConsomeAPI.fazerPegunta(pergunta);
                    System.out.println(resposta);
                    break;
                case 2:
                    System.out.println("Saindo da aplicação...");
                    running = false;
                    break;
                default:
                    System.out.println("Opção inválida.");
            }
        }
    }
}





package br.edu.fatecpg.api.gemini.service;
 
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
 
public class ConsomeAPI {
    private static final String API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=AIzaSyCLtJ5ee8lsetmlcktH84HJeWOlGu6R0lY";
    private static final Pattern RESP_PATTERN = Pattern.compile("\"text\"\\s*:\\s*\"([^\"]+)\"");
 
    public static String fazerPegunta(String pergunta) throws IOException, InterruptedException {
        String jsonRequest = gerarJsonRequest(pergunta);
        String respostaJson = enviarRequisicao(jsonRequest);
        return extrairResposta(respostaJson);
    }
 
    private static String gerarJsonRequest(String pergunta) {
        String promptFormatado = "O Resultado gerado não deve possuir formatação ou caracteres especiais. Pergunta: " + pergunta;
        return "{\"contents\":[{\"parts\":[{\"text\":\"" + promptFormatado + "\"}]}]}";
    }
 
    private static String enviarRequisicao(String jsonRequest) throws IOException, InterruptedException {
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_URL))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(jsonRequest))
                .build();
 
        return client.send(request, HttpResponse.BodyHandlers.ofString()).body();
    }
 
    private static String extrairResposta(String respostaJson) {
        StringBuilder resposta = new StringBuilder();
        for (String linha : respostaJson.lines().toList()) {
            Matcher matcher = RESP_PATTERN.matcher(linha);
            if (matcher.find()) {
                resposta.append(matcher.group()).append(" ");
            }
        }
        return resposta.toString();
    }
}